///|
fn camlpdf_rijndaelKeySetupEnc(
  rk : ArrayView[UInt],
  cipherKey : ArrayView[Byte],
  keyBits : Int,
) -> Int {
  let mut i = 0
  let mut offset = 0
  let mut temp : UInt = 0
  rk[offset + 0] = get_u32(cipherKey, 0)
  rk[offset + 1] = get_u32(cipherKey, 4)
  rk[offset + 2] = get_u32(cipherKey, 8)
  rk[offset + 3] = get_u32(cipherKey, 12)
  if keyBits == 128 {
    while true {
      temp = rk[offset + 3]
      rk[offset + 4] = rk[offset + 0] ^
        (te4[((temp >> 16) & 0xff).reinterpret_as_int()] & 0xff000000) ^
        (te4[((temp >> 8) & 0xff).reinterpret_as_int()] & 0x00ff0000) ^
        (te4[(temp & 0xff).reinterpret_as_int()] & 0x0000ff00) ^
        (te4[(temp >> 24).reinterpret_as_int()] & 0x000000ff) ^
        rcon[i]
      rk[offset + 5] = rk[offset + 1] ^ rk[offset + 4]
      rk[offset + 6] = rk[offset + 2] ^ rk[offset + 5]
      rk[offset + 7] = rk[offset + 3] ^ rk[offset + 6]
      i += 1
      if i == 10 {
        return 10
      }
      offset += 4
    }
  }
  rk[offset + 4] = get_u32(cipherKey, 16)
  rk[offset + 5] = get_u32(cipherKey, 20)
  if keyBits == 192 {
    while true {
      temp = rk[offset + 5]
      rk[offset + 6] = rk[offset + 0] ^
        (te4[((temp >> 16) & 0xff).reinterpret_as_int()] & 0xff000000) ^
        (te4[((temp >> 8) & 0xff).reinterpret_as_int()] & 0x00ff0000) ^
        (te4[(temp & 0xff).reinterpret_as_int()] & 0x0000ff00) ^
        (te4[(temp >> 24).reinterpret_as_int()] & 0x000000ff) ^
        rcon[i]
      rk[offset + 7] = rk[offset + 1] ^ rk[offset + 6]
      rk[offset + 8] = rk[offset + 2] ^ rk[offset + 7]
      rk[offset + 9] = rk[offset + 3] ^ rk[offset + 8]
      i += 1
      if i == 8 {
        return 12
      }
      rk[offset + 10] = rk[offset + 4] ^ rk[offset + 9]
      rk[offset + 11] = rk[offset + 5] ^ rk[offset + 10]
      offset += 6
    }
  }
  rk[offset + 6] = get_u32(cipherKey, 24)
  rk[offset + 7] = get_u32(cipherKey, 28)
  if keyBits == 256 {
    while true {
      temp = rk[offset + 7]
      rk[offset + 8] = rk[offset + 0] ^
        (te4[((temp >> 16) & 0xff).reinterpret_as_int()] & 0xff000000) ^
        (te4[((temp >> 8) & 0xff).reinterpret_as_int()] & 0x00ff0000) ^
        (te4[(temp & 0xff).reinterpret_as_int()] & 0x0000ff00) ^
        (te4[(temp >> 24).reinterpret_as_int()] & 0x000000ff) ^
        rcon[i]
      rk[offset + 9] = rk[offset + 1] ^ rk[offset + 8]
      rk[offset + 10] = rk[offset + 2] ^ rk[offset + 9]
      rk[offset + 11] = rk[offset + 3] ^ rk[offset + 10]
      i += 1
      if i == 7 {
        return 14
      }
      temp = rk[offset + 11]
      rk[offset + 12] = rk[offset + 4] ^
        (te4[(temp >> 24).reinterpret_as_int()] & 0xff000000) ^
        (te4[((temp >> 16) & 0xff).reinterpret_as_int()] & 0x00ff0000) ^
        (te4[((temp >> 8) & 0xff).reinterpret_as_int()] & 0x0000ff00) ^
        (te4[(temp & 0xff).reinterpret_as_int()] & 0x000000ff) 
      rk[offset + 13] = rk[offset + 5] ^ rk[offset + 12]
      rk[offset + 14] = rk[offset + 6] ^ rk[offset + 13]
      rk[offset + 15] = rk[offset + 7] ^ rk[offset + 14]
      offset += 8
    }
  }
  return 0
}

///|
fn _camlpdf_caml_aes_cook_encrypt_key(
  key : ArrayView[Byte],
) -> (Array[UInt], Int) {
  let ckey : Array[UInt] = Array::make(Cooked_length, 0)
  let nr = camlpdf_rijndaelKeySetupEnc(ckey, key, 8 * key.length())
  (ckey, nr)
}

///|
fn transfer_fixedarray_byte_to_bytes(x : FixedArray[Byte]) -> Bytes = "%identity"

///|
fn camlpdf_caml_aes_cook_encrypt_key(key : Bytes) -> Bytes {
  let (ekey, nr) = _camlpdf_caml_aes_cook_encrypt_key(key.to_array())
  let buffer = @buffer.new(size_hint=Cooked_key_size)
  for i in 0..<ekey.length() {
    buffer.write_uint_le(ekey[i])
  }
  buffer.write_byte(nr.to_byte())
  buffer.to_bytes()
}

///|
test "basic test" {
  let key : Bytes = "0123456789ABCDEF"
  let encrypt_cooked = camlpdf_caml_aes_cook_encrypt_key(key)
  inspect(
    encrypt_cooked,
    content=(
      #|b"\x33\x32\x31\x30\x37\x36\x35\x34\x42\x41\x39\x38\x46\x45\x44\x43\x29\x68\x5f\x2a\x1e\x5e\x6a\x1e\x5c\x1f\x53\x26\x1a\x5a\x17\x65\x64\xca\xe1\xd8\x7a\x94\x8b\xc6\x26\x8b\xd8\xe0\x3c\xd1\xcf\x85\xf3\x21\xdf\x56\x89\xb5\x54\x90\xaf\x3e\x8c\x70\x93\xef\x43\xf5\x15\xfd\x00\x44\x9c\x48\x54\xd4\x33\x76\xd8\xa4\xa0\x99\x9b\x51\xc4\x1d\xee\x40\x58\x55\xba\x94\x6b\x23\x62\x30\xcb\xba\xf9\x61\x2b\x02\x1a\xf9\x73\x57\xa0\x6d\x18\x74\xc2\x5d\xd3\xce\x3b\x3c\xc0\x64\x91\x5b\xb3\x33\x31\x36\xab\x47\xf3\x6b\x78\x89\xc8\x57\x9b\xd8\x36\x33\x28\xeb\x07\x05\x83\xac\xf4\x6e\xfb\x25\x3c\x39\x89\xd7\x09\xc3\xa1\x3c\x0e\xc6\x22\x90\xfa\xa8\xd9\xb5\xc6\x91\x08\xe2\xdc\x41\xa9\xde\xd2\x87\x8b\x4e\x28\x2f\x52\xfb\xee\xbe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a"
    ),
  )
}

///|
test {
  let key : Bytes = "0123456789ABCDEF"
  let key = key.to_array()
  let p1 = get_u32(key, 0)
  let p2 = get_u32(key, 4)
  let p3 = get_u32(key, 8)
  let p4 = get_u32(key, 12)
  inspect(
    p1.to_le_bytes(),
    content=(
      #|b"\x33\x32\x31\x30"
    ),
  )
  inspect(
    p2.to_le_bytes(),
    content=(
      #|b"\x37\x36\x35\x34"
    ),
  )
  inspect(
    p3.to_le_bytes(),
    content=(
      #|b"\x42\x41\x39\x38"
    ),
  )
  inspect(
    p4.to_le_bytes(),
    content=(
      #|b"\x46\x45\x44\x43"
    ),
  )
}

///|
test "camlpdf_caml_aes_cook_encrypt_key" {
  // Generated by https://generatepasswords.org/
  let key_128 = b"aGvw!pDaVuZ5Dz.3"
  let key_192 = b"cFFch2cK7.gQW#$FYQDa:wR6"
  let key_256 = b"4hrA;KwpQQXHXWkqa5bt5nX/%_vwE*Zp"
  inspect(
    camlpdf_caml_aes_cook_encrypt_key(key_128),
    content=(
      #|b"\x77\x76\x47\x61\x61\x44\x70\x21\x35\x5a\x75\x56\x33\x2e\x7a\x44\x6c\xb5\x76\xba\x0d\xf1\x06\x9b\x38\xab\x73\xcd\x0b\x85\x09\x89\xcb\x9e\xe1\xb9\xc6\x6f\xe7\x22\xfe\xc4\x94\xef\xf5\x41\x9d\x66\xf8\x78\x62\xe3\x3e\x17\x85\xc1\xc0\xd3\x11\x2e\x35\x92\x8c\x48\xaa\xee\x2d\x8f\x94\xf9\xa8\x4e\x54\x2a\xb9\x60\x61\xb8\x35\x28\x9e\x01\x41\x09\x0a\xf8\xe9\x47\x5e\xd2\x50\x27\x3f\x6a\x65\x0f\xe8\x74\x43\x64\xe2\x8c\xaa\x23\xbc\x5e\xfa\x04\x83\x34\x9f\x0b\xc3\x98\x5b\xff\x21\x14\xf1\xdc\x9d\x4a\x0b\xd8\x1e\x7e\x94\xd3\xa5\xea\xa8\x5d\x84\xfe\x59\x81\x19\xb4\x52\x59\x07\xca\xc6\x8a\xdb\x2f\xdc\xf2\x5f\xd1\x85\x73\x46\x65\xd7\x2a\x41\xaf\x11\xa0\x3b\xac\xa5\x46\x64\x7d\x20\x35\x22\x18\xf7\x1f\x63\xb7\xe6\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0a"
    ),
  )
  inspect(
    camlpdf_caml_aes_cook_encrypt_key(key_192),
    content=(
      #|b"\x63\x46\x46\x63\x4b\x63\x32\x68\x51\x67\x2e\x37\x46\x24\x23\x57\x61\x44\x51\x59\x36\x52\x77\x3a\xe3\x43\x46\x97\xa8\x20\x74\xff\xf9\x47\x5a\xc8\xbf\x63\x79\x9f\xde\x27\x28\xc6\xe8\x75\x5f\xfc\x53\xd8\xdb\x5a\xfb\xf8\xaf\xa5\x02\xbf\xf5\x6d\xbd\xdc\x8c\xf2\x63\xfb\xa4\x34\x8b\x8e\xfb\xc8\xbb\xe5\xc2\x51\x40\x1d\x6d\xf4\x42\xa2\x98\x99\xff\x7e\x14\x6b\x9c\x85\xb0\x5f\x17\x0b\x4b\x97\x33\x15\xe9\xea\x73\x08\x84\x1e\x31\xaa\x1c\x87\xce\xd4\x08\xec\x52\x51\xb8\xb3\x45\x5a\xf3\x24\x05\x7b\x57\xf7\x76\x73\xd3\xe9\x47\xd9\xcf\x6e\x89\x0d\xc7\x82\xdb\x5c\x7f\x31\x9e\x06\x8c\x15\x5c\x70\x38\xb3\x2a\x03\xeb\x5a\x6d\xda\x24\x34\xe4\xd7\xe3\xb6\x3f\x8b\x9c\x87\xa1\x8d\x10\x92\x13\x42\x65\x39\x39\x41\x8e\x63\x54\x9b\xaa\x57\xb0\x4c\x49\xe1\x8f\xc7\xd5\x66\x2e\x4a\xc5\xf4\xac\x73\xb3\x1f\x95\x32\x3d\x7c\xc1\xa9\x97\x2b\x71\xe5\xde\xca\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0c"
    ),
  )
  // found bug
  inspect(
    camlpdf_caml_aes_cook_encrypt_key(key_256),
    content=(
      #|b"\x41\x72\x68\x34\x70\x77\x4b\x3b\x48\x58\x51\x51\x71\x6b\x57\x58\x74\x62\x35\x61\x2f\x58\x6e\x35\x77\x76\x5f\x25\x70\x5a\x2a\x45\x2f\x23\xd6\xd0\x5f\x54\x9d\xeb\x17\x0c\xcc\xba\x66\x67\x9b\xe2\x47\xe7\x21\xf9\x68\xbf\x4f\xcc\x1f\xc9\x10\xe9\x6f\x93\x3a\xac\xbe\x8b\x0a\x52\xe1\xdf\x97\xb9\xf6\xd3\x5b\x03\x90\xb4\xc0\xe1\x27\x6a\x9b\x01\x4f\xd5\xd4\xcd\x50\x1c\xc4\x24\x3f\x8f\xfe\x88\x7a\xfe\x79\xed\x9b\x21\xee\x54\x6d\xf2\xb5\x57\xfd\x46\x75\xb6\x73\x30\x06\x4f\x3c\xe5\xd2\x82\x6c\xf9\x16\xa6\x53\x76\xe8\x2e\x4b\x13\x41\x7e\xd0\x32\xaf\x2a\xbd\xc0\x1a\x7d\x40\x86\x6f\xcb\x7a\x74\xae\x50\x46\x91\x7c\xd2\x2a\x68\x6a\x74\x79\x1e\x82\x5a\xf5\xa5\x33\x7d\x25\x97\x9c\x57\x98\x57\x86\x2a\xd8\xd1\xe9\xe1\x1b\x4a\xb0\xa8\x5d\xdb\xcc\x7a\x77\xb3\xa6\x0e\x0e\xad\x24\x54\xd5\x0e\xa6\x6b\xf0\x99\x3a\x3c\x68\xce\xbc\x16\xb0\x1f\x55\xf7\xfc\x8a\x4c\xc0\xa1\x51\x80\xba\xd6\xe2\x26\xb4\xd8\x4f\x02\xe0\x34\x6f\x22\x5c\xc4\xf6\x18\x60\xac\x38\xa4\x76\x1c\x27\xf1\x81\x0e"
    ),
  )
}